package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"example.com/go-api/graph/model"
	"example.com/go-api/utility/string_utilities"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, data model.LoginRequest) (*model.LoginResponse, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, page *int32, limit *int32) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {

	return &model.User{
		Username:  string_utilities.StringToPointer("admin"),
		Firstname: string_utilities.StringToPointer("Admin"),
		Lastname:  string_utilities.StringToPointer("User"),
		Email:     string_utilities.StringToPointer("r6EoP@example.com"),
		Role:      &model.Role{ID: "1", Name: "Admin"},
		ID:        "1",
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func ptrString(s string) *string {
	return &s
}
*/
